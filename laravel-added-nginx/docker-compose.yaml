version: "3.8"
services: 
  # nginx 서버를 가진 컨테이너
  server:
    # image: 'nginx:stable-alpine'
    build: 
      # ./dockerfiles로 설정안하는 이유는 dockerfiles 폴더안에 도커 파일이 빌드하려는 파일들이 없기 때문에 .으로 설정
      context: .
      # 그래서 도커 파일위치를 아래와 같이 경로를 설정
      dockerfile: dockerfiles/nginx.dockerfile
    ports: 
      - '8000:80'
    volumes: 
      - ./src:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on: 
      - php
      - mysql

  # php와 laravle을 실행하기 위한 컨테이너
  php:
    build: 
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      # delegated 태그는  컨테이너가 일부 데이터를 기록해야 하는 경우에 
      # 그에 대한 결과를 호스트 머신에 즉시 반영하지 않고 
      # 배치로 기본 처리함으로써 성능이 약간 더 나아지지만, 안정성은 떨집니다.
      - ./src:/var/www/html:delegated 
    user: "www-data"
    
  # mysql db 컨테이너
  mysql:
    image: mysql:5.7
    env_file:
      - ./env/mysql.env

  # 여기서 부터 유틸리티 컨테이너
  # npm과 같이 패키지를 관리하는 컨테이너, 처음에 laravel을 설정하는데 사용 가능
  composer:
    build: 
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html

  # laravel에 포함된 CLI
  artisan:
    build: 
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: [ "php", "/var/www/html/artisan" ] 

  # npm 컨테이너
  npm:
    image: node:18
    working_dir: /var/www/html
    entrypoint: [ "npm" ]
    volumes:
      - ./src:/var/www/html

  